name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 mypy black isort types-requests

      - name: Run linting
        run: |
          flake8 src/ --max-line-length=100 --ignore=E501,W503,E203
          black --check src/
          isort --check-only src/

      - name: Run type checking
        run: mypy src/ --ignore-missing-imports --no-strict-optional

      - name: Run tests
        run: python3 tests/run_tests.py

      - name: Generate coverage report
        run: |
          pytest tests/ --cov=src --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    permissions:
      issues: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js for Playwright
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Create test Playwright project
        run: |
          mkdir test-project
          cd test-project
          npm init -y
          npm install @playwright/test
          npx playwright install chromium

      - name: Create failing test
        run: |
          cd test-project
          cat > test.spec.js << 'EOF'
          const { test, expect } = require('@playwright/test');

          test('failing test 1', async ({ page }) => {
            await page.goto('https://example.com');
            await expect(page.locator('nonexistent')).toBeVisible();
          });

          test('failing test 2', async ({ page }) => {
            await page.goto('https://example.com');
            throw new Error('Intentional test failure');
          });

          test('passing test', async ({ page }) => {
            await page.goto('https://example.com');
            await expect(page.locator('h1')).toBeVisible();
          });
          EOF

      - name: Run Playwright tests
        run: |
          cd test-project
          npx playwright test --reporter=json --output-dir=test-results
        continue-on-error: true

      - name: Test the action
        uses: ./
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          report-path: 'test-project/test-results/results.json'
          max-failures: 2
          issue-title: 'Integration Test - PR #${{ github.event.number }}'
          issue-labels: 'test,integration,automated'
          deduplicate: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Bandit security scan
        run: |
          pip install bandit
          bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: bandit-report.json

  validate-action:
    name: Validate Action
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate action.yml
        run: |
          # Check that action.yml is valid YAML
          python -c "import yaml; yaml.safe_load(open('action.yml'))"

      - name: Check required files
        run: |
          test -f action.yml
          test -f README.md
          test -f LICENSE
          test -f requirements.txt
          test -d src/
          test -d tests/
          test -d examples/

      - name: Validate Python syntax
        run: |
          python -m py_compile src/*.py
          python -m py_compile tests/*.py

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, security-scan, validate-action]
    if: github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Create release package
        run: |
          # Create a clean package for release
          mkdir -p release-package
          cp -r src/ release-package/
          cp action.yml requirements.txt LICENSE README.md release-package/

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-package-${{ github.event.release.tag_name }}
          path: release-package/

      - name: Update marketplace tags
        run: |
          # Update major version tag (e.g., v1) for marketplace
          git config user.name github-actions
          git config user.email github-actions@github.com

          TAG_NAME=${{ github.event.release.tag_name }}
          MAJOR_VERSION=$(echo $TAG_NAME | cut -d. -f1)

          git tag -f $MAJOR_VERSION
          git push origin $MAJOR_VERSION --force
