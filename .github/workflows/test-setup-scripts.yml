name: Test Setup Scripts

on:
  pull_request:
    paths:
      - 'scripts/**'
      - '.pre-commit-config.yaml'
      - '.github/workflows/test-setup-scripts.yml'
  push:
    branches: [main, develop]
    paths:
      - 'scripts/**'
  workflow_dispatch:  # Allow manual trigger

jobs:
  test-bash-script:
    name: Test Bash Script (Linux/macOS)
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Make script executable
        run: chmod +x scripts/setup-precommit.sh

      - name: Run setup script
        run: ./scripts/setup-precommit.sh
        env:
          CI: true

      - name: Verify installation
        run: |
          # Check pre-commit is installed
          if ! command -v pre-commit &> /dev/null; then
            echo "❌ pre-commit not installed"
            exit 1
          fi
          echo "✅ pre-commit installed: $(pre-commit --version)"

          # Check hooks are installed
          if [ ! -f .git/hooks/pre-commit ]; then
            echo "❌ pre-commit hook not installed"
            exit 1
          fi
          echo "✅ pre-commit hook installed"

          # Check Python tools
          for tool in black isort flake8 mypy bandit detect-secrets; do
            if ! command -v $tool &> /dev/null; then
              echo "❌ $tool not installed"
              exit 1
            fi
            echo "✅ $tool installed"
          done

          # Check secrets baseline exists
          if [ ! -f .secrets.baseline ]; then
            echo "❌ .secrets.baseline not created"
            exit 1
          fi
          echo "✅ .secrets.baseline created"

      - name: Test pre-commit run
        run: |
          # This should pass on a clean checkout
          pre-commit run --all-files --show-diff-on-failure || true

      - name: Summary
        run: |
          echo "✅ Setup script test completed successfully on ${{ matrix.os }} with Python ${{ matrix.python-version }}"

  test-python-script:
    name: Test Python Script (Cross-platform)
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run Python setup script
        run: python scripts/setup-precommit.py
        env:
          CI: true

      - name: Verify installation (Unix)
        if: runner.os != 'Windows'
        run: |
          # Check pre-commit is installed
          if ! command -v pre-commit &> /dev/null; then
            echo "❌ pre-commit not installed"
            exit 1
          fi
          echo "✅ pre-commit installed: $(pre-commit --version)"

          # Check hooks are installed
          if [ ! -f .git/hooks/pre-commit ]; then
            echo "❌ pre-commit hook not installed"
            exit 1
          fi
          echo "✅ pre-commit hook installed"

          # Check secrets baseline
          if [ ! -f .secrets.baseline ]; then
            echo "❌ .secrets.baseline not created"
            exit 1
          fi
          echo "✅ .secrets.baseline created"

      - name: Verify installation (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Check pre-commit is installed
          if (!(Get-Command pre-commit -ErrorAction SilentlyContinue)) {
            Write-Error "pre-commit not installed"
            exit 1
          }
          Write-Host "✅ pre-commit installed: $(pre-commit --version)"

          # Check hooks are installed
          if (!(Test-Path .git/hooks/pre-commit)) {
            Write-Error "pre-commit hook not installed"
            exit 1
          }
          Write-Host "✅ pre-commit hook installed"

          # Check secrets baseline
          if (!(Test-Path .secrets.baseline)) {
            Write-Error ".secrets.baseline not created"
            exit 1
          }
          Write-Host "✅ .secrets.baseline created"

      - name: Test pre-commit run
        run: |
          pre-commit run --all-files --show-diff-on-failure || true

      - name: Summary
        run: |
          echo "✅ Python setup script test completed on ${{ matrix.os }} with Python ${{ matrix.python-version }}"

  test-windows-batch:
    name: Test Windows Batch Script
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run batch script
        shell: cmd
        run: scripts\setup-precommit.bat

      - name: Verify installation
        shell: pwsh
        run: |
          # Check pre-commit
          if (!(Get-Command pre-commit -ErrorAction SilentlyContinue)) {
            Write-Error "pre-commit not installed"
            exit 1
          }
          Write-Host "✅ pre-commit installed"

          # Check hooks
          if (!(Test-Path .git/hooks/pre-commit)) {
            Write-Error "pre-commit hook not installed"
            exit 1
          }
          Write-Host "✅ pre-commit hook installed"

          # Check baseline
          if (!(Test-Path .secrets.baseline)) {
            Write-Error ".secrets.baseline not created"
            exit 1
          }
          Write-Host "✅ .secrets.baseline created"

      - name: Summary
        run: echo "✅ Windows batch script test completed with Python ${{ matrix.python-version }}"

  test-script-idempotency:
    name: Test Script Idempotency
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Run setup script first time
        run: |
          chmod +x scripts/setup-precommit.sh
          ./scripts/setup-precommit.sh

      - name: Run setup script second time (should be idempotent)
        run: |
          echo "Running setup script again to test idempotency..."
          ./scripts/setup-precommit.sh

      - name: Verify still working
        run: |
          pre-commit run --all-files --show-diff-on-failure || true
          echo "✅ Script is idempotent - can be run multiple times safely"

  comprehensive-test:
    name: Comprehensive Integration Test
    runs-on: ubuntu-latest
    needs: [test-bash-script, test-python-script, test-windows-batch]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Run setup script
        run: |
          chmod +x scripts/setup-precommit.sh
          ./scripts/setup-precommit.sh

      - name: Create test file with issues
        run: |
          # Create a Python file with formatting issues
          cat > test_file.py << 'EOF'
          import os,sys
          def  foo( x,y ):
              unused_var=5
              return x+y
          EOF

      - name: Test pre-commit catches issues
        id: test-issues
        run: |
          # This should fail due to formatting issues
          if pre-commit run --files test_file.py; then
            echo "❌ Pre-commit should have failed but didn't"
            exit 1
          else
            echo "✅ Pre-commit correctly caught issues"
          fi
        continue-on-error: true

      - name: Fix issues with auto-fixers
        run: |
          black test_file.py || true
          isort test_file.py || true

      - name: Test pre-commit passes after fixes
        run: |
          if pre-commit run --files test_file.py; then
            echo "✅ Pre-commit passes after auto-fixes"
          else
            echo "⚠️ Some issues remain (expected for linting)"
          fi

      - name: Test secret detection
        run: |
          # Create file with fake secret
          echo 'API_KEY = "sk-1234567890abcdef1234567890abcdef"' > secret_test.py

          # This should fail
          if pre-commit run detect-secrets --files secret_test.py; then
            echo "❌ Secret detection should have failed"
            exit 1
          else
            echo "✅ Secret detection working correctly"
          fi
        continue-on-error: true

      - name: Cleanup
        run: |
          rm -f test_file.py secret_test.py

      - name: Final summary
        run: |
          echo "✅ All integration tests passed!"
          echo "Setup scripts work correctly across platforms"
          echo "Pre-commit hooks are properly configured and functioning"

  report:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [comprehensive-test]
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "## 📊 Setup Scripts Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All setup scripts have been tested across multiple platforms and Python versions." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Tests Completed" >> $GITHUB_STEP_SUMMARY
          echo "- Bash script (Linux & macOS)" >> $GITHUB_STEP_SUMMARY
          echo "- Python script (Linux, macOS & Windows)" >> $GITHUB_STEP_SUMMARY
          echo "- Windows batch script" >> $GITHUB_STEP_SUMMARY
          echo "- Idempotency test" >> $GITHUB_STEP_SUMMARY
          echo "- Comprehensive integration test" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐍 Python Versions Tested" >> $GITHUB_STEP_SUMMARY
          echo "- Python 3.9" >> $GITHUB_STEP_SUMMARY
          echo "- Python 3.10" >> $GITHUB_STEP_SUMMARY
          echo "- Python 3.11" >> $GITHUB_STEP_SUMMARY
          echo "- Python 3.12" >> $GITHUB_STEP_SUMMARY
