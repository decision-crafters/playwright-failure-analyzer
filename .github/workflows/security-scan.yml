name: Scheduled Security Scan

on:
  schedule:
    # Run every day at 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual trigger
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'requirements.txt'
      - '.github/workflows/security-scan.yml'

permissions:
  contents: read
  security-events: write
  issues: write

jobs:
  comprehensive-security-scan:
    name: Comprehensive Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for thorough analysis

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Install all security tools
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety detect-secrets semgrep
          pip install -r requirements.txt

      # 1. Bandit - Python security linter
      - name: Run Bandit security scan
        id: bandit
        run: |
          echo "## 🛡️ Bandit Security Scan Results" >> $GITHUB_STEP_SUMMARY
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f screen | tee -a $GITHUB_STEP_SUMMARY || true
        continue-on-error: true

      # 2. Safety - Check for known vulnerabilities in dependencies
      - name: Run Safety dependency check
        id: safety
        run: |
          echo "## 📦 Safety Dependency Scan Results" >> $GITHUB_STEP_SUMMARY
          safety check --json > safety-report.json || true
          safety check || echo "Some vulnerabilities found - see report" | tee -a $GITHUB_STEP_SUMMARY
        continue-on-error: true

      # 3. Detect Secrets - Comprehensive secret scanning
      - name: Run detect-secrets scan
        id: detect-secrets
        run: |
          echo "## 🔐 Detect-Secrets Scan Results" >> $GITHUB_STEP_SUMMARY

          # Create new baseline for comparison
          detect-secrets scan --exclude-files '.*\.lock$' > .secrets.baseline.new || true

          # Compare with existing baseline
          if diff .secrets.baseline .secrets.baseline.new > /dev/null 2>&1; then
            echo "✅ No new secrets detected" | tee -a $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ New potential secrets detected!" | tee -a $GITHUB_STEP_SUMMARY
            echo "Run 'detect-secrets audit .secrets.baseline.new' to review" | tee -a $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true

      # 4. Gitleaks - Git secret scanner
      - name: Run Gitleaks scan
        id: gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_ENABLE_SUMMARY: true
        continue-on-error: true

      # 5. Semgrep - Static analysis
      - name: Run Semgrep scan
        id: semgrep
        run: |
          echo "## 🔍 Semgrep Static Analysis Results" >> $GITHUB_STEP_SUMMARY
          semgrep --config=auto src/ --json -o semgrep-report.json || true
          semgrep --config=auto src/ || echo "Issues found - see report" | tee -a $GITHUB_STEP_SUMMARY
        continue-on-error: true

      # Upload all reports as artifacts
      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.run_number }}
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json
            .secrets.baseline.new
          retention-days: 90

      # Create issue if critical vulnerabilities found
      - name: Check for critical issues
        id: check-critical
        run: |
          CRITICAL=false

          # Check Bandit for high severity issues
          if [ -f bandit-report.json ]; then
            HIGH_COUNT=$(jq '[.results[] | select(.issue_severity == "HIGH" or .issue_severity == "CRITICAL")] | length' bandit-report.json)
            if [ "$HIGH_COUNT" -gt 0 ]; then
              echo "Found $HIGH_COUNT high/critical Bandit issues"
              CRITICAL=true
            fi
          fi

          # Check Safety for critical vulnerabilities
          if [ -f safety-report.json ]; then
            if [ "$(jq 'length' safety-report.json)" -gt 0 ]; then
              echo "Found vulnerabilities in dependencies"
              CRITICAL=true
            fi
          fi

          echo "critical=$CRITICAL" >> $GITHUB_OUTPUT

      - name: Create security issue
        if: steps.check-critical.outputs.critical == 'true' && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let issueBody = `## 🚨 Security Vulnerabilities Detected

            The scheduled security scan has detected critical security issues that need attention.

            ### 📊 Scan Results

            `;

            // Add Bandit results
            if (fs.existsSync('bandit-report.json')) {
              const banditData = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
              const highIssues = banditData.results.filter(r =>
                r.issue_severity === 'HIGH' || r.issue_severity === 'CRITICAL'
              );

              if (highIssues.length > 0) {
                issueBody += `#### 🛡️ Bandit (High/Critical Issues: ${highIssues.length})\n\n`;
                highIssues.slice(0, 5).forEach(issue => {
                  issueBody += `- **${issue.issue_text}** in \`${issue.filename}:${issue.line_number}\`\n`;
                  issueBody += `  - Severity: ${issue.issue_severity}\n`;
                  issueBody += `  - Confidence: ${issue.issue_confidence}\n\n`;
                });
              }
            }

            // Add Safety results
            if (fs.existsSync('safety-report.json')) {
              const safetyData = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
              if (safetyData.length > 0) {
                issueBody += `\n#### 📦 Safety (Vulnerable Dependencies: ${safetyData.length})\n\n`;
                safetyData.slice(0, 5).forEach(vuln => {
                  issueBody += `- **${vuln[0]}** ${vuln[1]} → ${vuln[2]}\n`;
                  issueBody += `  - ${vuln[3]}\n\n`;
                });
              }
            }

            issueBody += `\n### 🔧 Next Steps

            1. **Review the full reports** in the [workflow artifacts](../actions/runs/${context.runId})
            2. **Fix critical issues** immediately
            3. **Update dependencies** if needed: \`pip install --upgrade -r requirements.txt\`
            4. **Run security scans locally**:
               \`\`\`bash
               bandit -r src/
               safety check
               detect-secrets scan
               \`\`\`
            5. **Re-run this workflow** after fixes to verify

            ### 📚 Resources

            - [Bandit Documentation](https://bandit.readthedocs.io/)
            - [Safety Documentation](https://pyup.io/safety/)
            - [OWASP Top 10](https://owasp.org/www-project-top-ten/)

            ---
            *This issue was automatically created by the security-scan workflow.*
            *Workflow Run: [#${context.runNumber}](../actions/runs/${context.runId})*`;

            // Check if there's already an open security issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security,automated'
            });

            if (issues.data.length === 0) {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🚨 Security Vulnerabilities Detected - Scheduled Scan',
                body: issueBody,
                labels: ['security', 'automated', 'high-priority']
              });
            } else {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: `## 🔄 Updated Security Scan Results\n\n${issueBody}`
              });
            }

      # Generate summary
      - name: Generate summary
        if: always()
        run: |
          echo "## 📊 Security Scan Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All security reports have been generated and uploaded as artifacts." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [View Artifacts](../actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Security Policy](../security/policy)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.check-critical.outputs.critical }}" == "true" ]; then
            echo "⚠️ **Critical issues found!** Please review immediately." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No critical issues detected." >> $GITHUB_STEP_SUMMARY
          fi
