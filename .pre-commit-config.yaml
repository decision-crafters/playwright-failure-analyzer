# Pre-commit hooks configuration for Playwright Failure Analyzer
# Security-first approach with Python development tools
# See https://pre-commit.com for more information

default_language_version:
  python: python3.11

repos:
  # ============================================================================
  # SECURITY HOOKS (CRITICAL - Always run first)
  # ============================================================================

  # Detect hardcoded secrets, passwords, and API keys
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: üîê Detect secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: package.lock.json

  # Comprehensive secret scanning with Gitleaks
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.18.2
    hooks:
      - id: gitleaks
        name: üïµÔ∏è Gitleaks secret scanner
        exclude: ^\.secrets\.baseline$

  # GitHub Actions workflow validation
  - repo: https://github.com/python-jsonschema/check-jsonschema
    rev: 0.28.0
    hooks:
      - id: check-github-workflows
        name: ‚úÖ Validate GitHub Actions workflows
        args: ["--verbose"]

  # Python security linting with Bandit
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.7
    hooks:
      - id: bandit
        name: üõ°Ô∏è Bandit security scan
        args: ['-r', 'src/', '-f', 'screen']
        pass_filenames: false

  # ============================================================================
  # PYTHON CODE QUALITY HOOKS
  # ============================================================================

  # Code formatting with Black
  - repo: https://github.com/psf/black
    rev: 24.2.0
    hooks:
      - id: black
        name: üé® Format code with Black
        args: ['--line-length=100']
        language_version: python3.11

  # Import sorting with isort
  - repo: https://github.com/PyCQA/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: üì¶ Sort imports with isort
        args: ['--profile', 'black', '--line-length', '100']

  # Python linting with Flake8
  - repo: https://github.com/PyCQA/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        name: üîç Lint with Flake8
        args: ['--max-line-length=100', '--ignore=E501,W503,E203', '--exclude=__pycache__']

  # Type checking with mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        name: üîé Type check with mypy
        args: ['--ignore-missing-imports', '--no-strict-optional']
        additional_dependencies: [types-requests]

  # ============================================================================
  # GENERAL FILE QUALITY HOOKS
  # ============================================================================

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # File format checks
      - id: check-yaml
        name: ‚úì Check YAML syntax

      - id: check-json
        name: ‚úì Check JSON syntax

      - id: check-toml
        name: ‚úì Check TOML syntax

      - id: check-xml
        name: ‚úì Check XML syntax

      # Code quality checks
      - id: check-ast
        name: ‚úì Validate Python AST

      - id: check-builtin-literals
        name: ‚úì Check builtin type constructor use

      - id: check-case-conflict
        name: ‚úì Check for case conflicts

      - id: check-docstring-first
        name: ‚úì Check docstring placement

      - id: check-merge-conflict
        name: ‚úì Check for merge conflicts

      - id: check-added-large-files
        name: ‚úì Prevent large files
        args: ['--maxkb=1000']

      - id: debug-statements
        name: ‚úì Check for debug statements

      - id: detect-private-key
        name: üîë Detect private keys

      # File formatting
      - id: end-of-file-fixer
        name: ‚úì Fix end of files

      - id: trailing-whitespace
        name: ‚úì Trim trailing whitespace
        args: ['--markdown-linebreak-ext=md']

      - id: mixed-line-ending
        name: ‚úì Fix mixed line endings
        args: ['--fix=lf']

      # Git checks
      - id: check-vcs-permalinks
        name: ‚úì Check VCS permalinks

      - id: forbid-new-submodules
        name: ‚úì Prevent new submodules

  # ============================================================================
  # MARKDOWN AND DOCUMENTATION
  # ============================================================================

  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.39.0
    hooks:
      - id: markdownlint
        name: üìù Lint Markdown files
        args: ['--fix', '--disable', 'MD013', 'MD033', 'MD041']

  # ============================================================================
  # COMMIT MESSAGE VALIDATION
  # ============================================================================

  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.1.0
    hooks:
      - id: conventional-pre-commit
        name: üí¨ Validate commit message format
        stages: [commit-msg]
        args: []
