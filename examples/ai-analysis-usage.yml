name: Playwright Testing with AI Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  test-with-ai-analysis:
    runs-on: ubuntu-latest
    
    permissions:
      issues: write
      contents: read
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Run Playwright tests
        run: |
          npx playwright test \
            --reporter=json \
            --output-dir=test-results
        continue-on-error: true
        
      - name: Bundle failures with AI analysis
        if: always()
        uses: your-org/playwright-failure-bundler@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          report-path: 'test-results/results.json'
          max-failures: 5
          issue-title: 'ü§ñ AI-Analyzed Test Failures - ${{ github.event_name }} #${{ github.run_number }}'
          issue-labels: 'bug,playwright,ai-analyzed,priority-high'
          assignees: 'qa-team,tech-lead'
          deduplicate: true
          ai-analysis: true  # Enable AI-powered analysis
        env:
          # Required for AI analysis - use repository secrets
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          
  test-with-custom-ai-model:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      issues: write
      contents: read
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Run comprehensive test suite
        run: |
          npx playwright test \
            --config=playwright.config.comprehensive.js \
            --reporter=json \
            --output-dir=comprehensive-results
        continue-on-error: true
        
      - name: Advanced AI analysis with custom model
        if: always()
        uses: your-org/playwright-failure-bundler@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          report-path: 'comprehensive-results/results.json'
          max-failures: 10
          issue-title: 'üß† Advanced AI Analysis - Production Test Failures'
          issue-labels: 'critical,production,ai-enhanced,requires-review'
          assignees: 'senior-qa,tech-lead,product-owner'
          deduplicate: true
          ai-analysis: true
        env:
          # Use a more powerful model for production issues
          AI_MODEL: 'gpt-4.1-mini'  # or 'gemini-2.5-flash'
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          
  test-with-anthropic:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'  # Only for scheduled runs
    
    permissions:
      issues: write
      contents: read
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Run nightly test suite
        run: |
          npx playwright test \
            --config=playwright.config.nightly.js \
            --reporter=json \
            --output-dir=nightly-results
        continue-on-error: true
        
      - name: AI analysis with Anthropic Claude
        if: always()
        uses: your-org/playwright-failure-bundler@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          report-path: 'nightly-results/results.json'
          max-failures: 8
          issue-title: 'üåô Nightly Test Analysis - Claude Insights'
          issue-labels: 'nightly,claude-analysis,comprehensive'
          assignees: 'qa-team'
          deduplicate: true
          ai-analysis: true
        env:
          # Use Anthropic Claude for analysis
          AI_MODEL: 'claude-3-sonnet-20240229'
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

  test-matrix-with-ai:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        
    permissions:
      issues: write
      contents: read
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browser
        run: npx playwright install --with-deps ${{ matrix.browser }}
        
      - name: Run browser-specific tests
        run: |
          npx playwright test \
            --project=${{ matrix.browser }} \
            --reporter=json \
            --output-dir=test-results-${{ matrix.browser }}
        continue-on-error: true
        
      - name: Browser-specific AI analysis
        if: always()
        uses: your-org/playwright-failure-bundler@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          report-path: 'test-results-${{ matrix.browser }}/results.json'
          max-failures: 3
          issue-title: 'üåê ${{ matrix.browser }} Test Failures - AI Analysis'
          issue-labels: 'browser-specific,${{ matrix.browser }},ai-analyzed'
          assignees: 'browser-compatibility-team'
          deduplicate: true
          ai-analysis: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Add browser context for AI analysis
          AI_CONTEXT: 'Browser: ${{ matrix.browser }}'
