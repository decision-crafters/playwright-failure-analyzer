name: Advanced Playwright Failure Bundling

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Run nightly tests

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_VERSION: '1.40.0'

jobs:
  test-matrix:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: [chromium, firefox, webkit]

    permissions:
      issues: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: |
          npm install @playwright/test@${{ env.PLAYWRIGHT_VERSION }}
          npx playwright install --with-deps ${{ matrix.project }}

      - name: Run Playwright tests
        run: |
          npx playwright test \
            --project=${{ matrix.project }} \
            --reporter=json \
            --output-dir=test-results-${{ matrix.project }}
        continue-on-error: true

      - name: Bundle test failures for ${{ matrix.project }}
        if: always()
        uses: your-org/playwright-failure-bundler@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          report-path: 'test-results-${{ matrix.project }}/results.json'
          max-failures: 5
          issue-title: 'ðŸš¨ ${{ matrix.project }} Test Failures - ${{ github.event_name }} #${{ github.run_number }}'
          issue-labels: 'bug,playwright,${{ matrix.project }},priority-high'
          assignees: 'qa-team,tech-lead'
          deduplicate: true

  integration-tests:
    runs-on: ubuntu-latest
    needs: test-matrix
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      issues: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Run integration tests
        run: |
          npx playwright test \
            --config=playwright.integration.config.js \
            --reporter=json \
            --output-dir=integration-results
        continue-on-error: true
        env:
          API_BASE_URL: ${{ secrets.STAGING_API_URL }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

      - name: Bundle integration test failures
        if: always()
        uses: your-org/playwright-failure-bundler@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          report-path: 'integration-results/results.json'
          max-failures: 10
          issue-title: 'ðŸ”¥ Integration Test Failures - Production Deploy Blocked'
          issue-labels: 'critical,integration,production-blocker'
          assignees: 'devops-team,senior-dev'
          deduplicate: false  # Always create new issues for integration failures

  notify-on-failure:
    runs-on: ubuntu-latest
    needs: [test-matrix, integration-tests]
    if: failure() && github.ref == 'refs/heads/main'

    steps:
      - name: Notify team on Slack
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'Critical test failures detected in main branch. Check GitHub issues for details.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
